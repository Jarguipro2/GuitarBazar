@model GuitarBazar.Models.Guitar

@{
    ViewBag.Title = "Create";
    var aujourdhui = ((DateTime)ViewBag.Aujourdhui).ToLongDateString();
}

<h1>@aujourdhui</h1>
<h2>
    Ajout de guitare à vendre  
    @Helper.GlyphiconAction("Index", "glyphicon-arrow-up", "Retour à la liste")
</h2>

@if (((SelectList)ViewBag.Sellers).Count() > 1)
{
    using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.AddDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.HiddenFor(model => model.Sold)

            <div class="form-group">
                @Html.LabelFor(model => model.SellerId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("SellerId", (SelectList)ViewBag.Sellers, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.SellerId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Maker, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Maker, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Maker, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Model, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Model, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Model, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ImageURL, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ImageURL, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ImageURL, "", new { @class = "text-danger" })
                </div>
            </div>
            <!-- Preview -->
            <div class="form-group">
                @Html.Label("Aperçu", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <table>
                        <tr style="vertical-align:top">
                            <td> @Helper.GuitarImage("preview", "thumbnail", Model.ImageURL, Model.RotateImage)</td>
                            <td> @Html.LabelFor(model => model.RotateImage, htmlAttributes: new { @class = "control-label col-md-2" })</td>
                            <td style="padding-top:7px"> @Html.EditorFor(model => model.RotateImage)</td>
                        </tr>
                    </table>
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    <br />
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Condition, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Helper.EnumToRadioButtonGroup("Condition", Model.Condition, true)
                    @Html.ValidationMessageFor(model => model.Condition, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.GuitarType, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Helper.EnumToRadioButtonGroup("GuitarType", Model.GuitarType, true)
                    @Html.ValidationMessageFor(model => model.GuitarType, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Ajouter" class="btn btn-primary" />
                </div>
            </div>
        </div>
    }
}
else
{
    <h3>Impossible d'ajouter une guitare à vendre sans qu'il y ait au moins un vendeur.</h3>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $.validator.addMethod(
            "Condition",
            function (value, element) { return ($("input[name='Condition']:checked").val() != undefined); },
            "Choix obligatoire"
        );
        $.validator.addMethod(
            "GuitarType",
            function (value, element) { return ($("input[name='GuitarType']:checked").val() != undefined); },
            "Choix obligatoire"
        );
        $("#ImageURL").change(function () {
            $("#preview").css("background", 'url("' + $("#ImageURL").val() + '") no-repeat center ');
            $("#preview").css("background-size", 'contain');
        })
        $("#RotateImage").change(function () {
            if ($('#RotateImage').is(":checked")) {
                $("#preview").css("transform", 'rotate(270deg)');
            }
            else {
                $("#preview").css("transform", 'rotate(0deg)');
            }
        })
    </script>
}
